// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size
// @generated from protobuf file "edit.proto" (package "edit", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EditService } from "./edit";
import type { UserId } from "./edit";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { TrackName } from "./edit";
import type { TrackInfo } from "./edit";
import type { SampleInstanceId } from "./edit";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "./google/protobuf/empty";
import type { SampleInfo } from "./edit";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service edit.EditService
 */
export interface IEditServiceClient {
    /**
     * Change the sample position on a track
     *
     * @generated from protobuf rpc: ChangeSamplePosition(edit.SampleInfo) returns (google.protobuf.Empty);
     */
    changeSamplePosition(input: SampleInfo, options?: RpcOptions): UnaryCall<SampleInfo, Empty>;
    /**
     * Removes a sample from a track
     *
     * @generated from protobuf rpc: RemoveSample(edit.SampleInstanceId) returns (google.protobuf.Empty);
     */
    removeSample(input: SampleInstanceId, options?: RpcOptions): UnaryCall<SampleInstanceId, Empty>;
    /**
     * Update track name
     *
     * @generated from protobuf rpc: UpdateTrackName(edit.TrackInfo) returns (google.protobuf.Empty);
     */
    updateTrackName(input: TrackInfo, options?: RpcOptions): UnaryCall<TrackInfo, Empty>;
    /**
     * Adds a track on the page. Gives it a default name if not specified
     *
     * @generated from protobuf rpc: AddTrack(edit.TrackName) returns (google.protobuf.Empty);
     */
    addTrack(input: TrackName, options?: RpcOptions): UnaryCall<TrackName, Empty>;
    /**
     * Server-side streaming to broadcast edit events
     *
     * @generated from protobuf rpc: GetEditEvents(edit.UserId) returns (stream edit.SampleInfo);
     */
    getEditEvents(input: UserId, options?: RpcOptions): ServerStreamingCall<UserId, SampleInfo>;
}
/**
 * @generated from protobuf service edit.EditService
 */
export class EditServiceClient implements IEditServiceClient, ServiceInfo {
    typeName = EditService.typeName;
    methods = EditService.methods;
    options = EditService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Change the sample position on a track
     *
     * @generated from protobuf rpc: ChangeSamplePosition(edit.SampleInfo) returns (google.protobuf.Empty);
     */
    changeSamplePosition(input: SampleInfo, options?: RpcOptions): UnaryCall<SampleInfo, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SampleInfo, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Removes a sample from a track
     *
     * @generated from protobuf rpc: RemoveSample(edit.SampleInstanceId) returns (google.protobuf.Empty);
     */
    removeSample(input: SampleInstanceId, options?: RpcOptions): UnaryCall<SampleInstanceId, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SampleInstanceId, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Update track name
     *
     * @generated from protobuf rpc: UpdateTrackName(edit.TrackInfo) returns (google.protobuf.Empty);
     */
    updateTrackName(input: TrackInfo, options?: RpcOptions): UnaryCall<TrackInfo, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackInfo, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Adds a track on the page. Gives it a default name if not specified
     *
     * @generated from protobuf rpc: AddTrack(edit.TrackName) returns (google.protobuf.Empty);
     */
    addTrack(input: TrackName, options?: RpcOptions): UnaryCall<TrackName, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackName, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Server-side streaming to broadcast edit events
     *
     * @generated from protobuf rpc: GetEditEvents(edit.UserId) returns (stream edit.SampleInfo);
     */
    getEditEvents(input: UserId, options?: RpcOptions): ServerStreamingCall<UserId, SampleInfo> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserId, SampleInfo>("serverStreaming", this._transport, method, opt, input);
    }
}
