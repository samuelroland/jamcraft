// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size
// @generated from protobuf file "edit.proto" (package "edit", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EditService } from "./edit";
import type { SampleInfo } from "./edit";
import type { TrackInfo } from "./edit";
import type { SampleInstanceId } from "./edit";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SamplePosition } from "./edit";
import type { Empty } from "./google/protobuf/empty";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service edit.EditService
 */
export interface IEditServiceClient {
    /**
     * Server-side streaming to broadcast positions of samples changed by others
     *
     * @generated from protobuf rpc: GetSamplePositions(google.protobuf.Empty) returns (stream edit.SamplePosition);
     */
    getSamplePositions(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, SamplePosition>;
    /**
     * Unary sending to let clients change position of samples
     *
     * @generated from protobuf rpc: ChangeSamplePosition(edit.SamplePosition) returns (google.protobuf.Empty);
     */
    changeSamplePosition(input: SamplePosition, options?: RpcOptions): UnaryCall<SamplePosition, Empty>;
    /**
     * Unary sending to let clients remove a sample from the project, giving the samples_tracks.id !
     *
     * @generated from protobuf rpc: RemoveSample(edit.SampleInstanceId) returns (google.protobuf.Empty);
     */
    removeSample(input: SampleInstanceId, options?: RpcOptions): UnaryCall<SampleInstanceId, Empty>;
    /**
     * Server-side streaming to broadcast updated tracks, it allows to update track names in live
     *
     * @generated from protobuf rpc: GetUpdatedTracks(google.protobuf.Empty) returns (stream edit.TrackInfo);
     */
    getUpdatedTracks(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, TrackInfo>;
    /**
     * Unary sending to update track info or create one
     *
     * @generated from protobuf rpc: ChangeTrackInfo(edit.TrackInfo) returns (google.protobuf.Empty);
     */
    changeTrackInfo(input: TrackInfo, options?: RpcOptions): UnaryCall<TrackInfo, Empty>;
    /**
     * Server-side streaming to broadcast new sample uploads, useful to update the local library
     *
     * @generated from protobuf rpc: GetSampleUploads(google.protobuf.Empty) returns (stream edit.SampleInfo);
     */
    getSampleUploads(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, SampleInfo>;
}
/**
 * @generated from protobuf service edit.EditService
 */
export class EditServiceClient implements IEditServiceClient, ServiceInfo {
    typeName = EditService.typeName;
    methods = EditService.methods;
    options = EditService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Server-side streaming to broadcast positions of samples changed by others
     *
     * @generated from protobuf rpc: GetSamplePositions(google.protobuf.Empty) returns (stream edit.SamplePosition);
     */
    getSamplePositions(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, SamplePosition> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, SamplePosition>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Unary sending to let clients change position of samples
     *
     * @generated from protobuf rpc: ChangeSamplePosition(edit.SamplePosition) returns (google.protobuf.Empty);
     */
    changeSamplePosition(input: SamplePosition, options?: RpcOptions): UnaryCall<SamplePosition, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SamplePosition, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Unary sending to let clients remove a sample from the project, giving the samples_tracks.id !
     *
     * @generated from protobuf rpc: RemoveSample(edit.SampleInstanceId) returns (google.protobuf.Empty);
     */
    removeSample(input: SampleInstanceId, options?: RpcOptions): UnaryCall<SampleInstanceId, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SampleInstanceId, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Server-side streaming to broadcast updated tracks, it allows to update track names in live
     *
     * @generated from protobuf rpc: GetUpdatedTracks(google.protobuf.Empty) returns (stream edit.TrackInfo);
     */
    getUpdatedTracks(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, TrackInfo> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, TrackInfo>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Unary sending to update track info or create one
     *
     * @generated from protobuf rpc: ChangeTrackInfo(edit.TrackInfo) returns (google.protobuf.Empty);
     */
    changeTrackInfo(input: TrackInfo, options?: RpcOptions): UnaryCall<TrackInfo, Empty> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<TrackInfo, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Server-side streaming to broadcast new sample uploads, useful to update the local library
     *
     * @generated from protobuf rpc: GetSampleUploads(google.protobuf.Empty) returns (stream edit.SampleInfo);
     */
    getSampleUploads(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, SampleInfo> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, SampleInfo>("serverStreaming", this._transport, method, opt, input);
    }
}
