// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size
// @generated from protobuf file "mouse.proto" (package "mouse", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mouse.MousePosition
 */
export interface MousePosition {
    /**
     * @generated from protobuf field: uint32 userId = 1;
     */
    userId: number;
    /**
     * @generated from protobuf field: uint32 x = 2;
     */
    x: number;
    /**
     * @generated from protobuf field: uint32 y = 3;
     */
    y: number;
}
/**
 * @generated from protobuf message mouse.MouseSubscription
 */
export interface MouseSubscription {
    /**
     * @generated from protobuf field: uint32 userId = 1;
     */
    userId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class MousePosition$Type extends MessageType<MousePosition> {
    constructor() {
        super("mouse.MousePosition", [
            { no: 1, name: "userId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "x", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "y", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message mouse.MousePosition
 */
export const MousePosition = new MousePosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MouseSubscription$Type extends MessageType<MouseSubscription> {
    constructor() {
        super("mouse.MouseSubscription", [
            { no: 1, name: "userId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message mouse.MouseSubscription
 */
export const MouseSubscription = new MouseSubscription$Type();
/**
 * @generated ServiceType for protobuf service mouse.MouseService
 */
export const MouseService = new ServiceType("mouse.MouseService", [
    { name: "GetMouseUpdates", serverStreaming: true, options: {}, I: MouseSubscription, O: MousePosition },
    { name: "SendMousePosition", options: {}, I: MousePosition, O: Empty }
]);
